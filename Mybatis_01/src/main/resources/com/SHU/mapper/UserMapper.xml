<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper   PUBLIC "-//ibatis.apache.org//DTD Mapper 3.0//EN"  "http://ibatis.apache.org/dtd/ibatis-3-mapper.dtd">
<mapper namespace="com.SHU.mapper.UserMapper">

    <!--MyBatis对于简单的单表查询一般使用resultType就可以解决，
        对于多表联合查询往往都要使用resultMap进行详细的描述
        告诉mybatis怎么封装-->
    <!--封装方式一：使用association进行关联-官方推荐-->
    <resultMap id="userWithDetailMap" type="com.SHU.pojo.UserWithDetail">
        <!--user的基本信息-->
        <!--property对应javabean里面的属性，column对应数据库里面的列-->
        <id property="uId" column="u_id"/>
        <result property="phone" column="phone"/>
        <result property="createDate" column="create_date"/>
        <result property="password" column="password"/>
        <result property="status" column="status"/>
        <!--持有userDetail的封装
            property是java里面的属性，由于它不像前面result简单属性
            因此需要额外指明其数据类型-->
        <association property="userDetail" javaType="com.SHU.pojo.UserDetail">
            <!--association中的属性要以JavaType中对应的属性进行封装-->
            <id property="id" column="id"/>
            <result property="address" column="address"/>
            <result property="cid" column="cid"/>
        </association>
    </resultMap>
    <!--封装方式二：使用association进行关联-->
    <resultMap id="userWithDetailMap2" type="com.SHU.pojo.UserWithDetail">
        <!--user的基本信息-->
        <id property="uId" column="u_id"/>
        <result property="phone" column="phone"/>
        <result property="createDate" column="create_date"/>
        <result property="password" column="password"/>
        <result property="status" column="status"/>
        <!--连缀点法书写-->
        <result property="userDetail.id" column="id"/>
        <result property="userDetail.cid" column="cid"/>
        <result property="userDetail.address" column="address"/>
    </resultMap>
    
    <resultMap id="userBaseMap" type="com.SHU.pojo.UserWithDetail">
        <id property="uId" column="u_id"/>
        <result property="phone" column="phone"/>
        <result property="createDate" column="create_date"/>
        <result property="password" column="password"/>
        <result property="status" column="status"/>
    </resultMap>
    
    <resultMap id="userWithBlog" extends="userBaseMap" type="com.SHU.pojo.UserBlog">
        <collection property="blogs" ofType="com.SHU.pojo.Blog">
            <id property="id" column="bid"/>
            <result property="content" column="blogContent"/>
            <result property="title" column="title"/>
            <result property="summary" column="summary"/>
            <collection property="comments" ofType="com.SHU.pojo.Comment">
                <id property="id" column="cid"/>
                <result property="content" column="commentContent"/>
            </collection>
        </collection>
    </resultMap>
    
    <select id="queryById" resultMap="userWithDetailMap">
        select t1.u_id,t1.phone,t1.create_date,t1.password,t1.status,
          t2.u_id,t2.id,t2.address,t2.cid
        from user t1,user_detail t2
        <where>
            t1.u_id=t2.u_id
            and t1.u_id=#{id}
        </where>
    </select>
    <select id="queryByIdWithBlog" resultMap="userWithBlog">
        select t1.u_id,t1.phone,t1.password,t1.create_date,t1.status,
        t2.id bid,t2.title,t2.summary,t2.content blogContent,
        t3.id cid,t3.content commentContent
        from user t1,blog t2,comment t3
        <where>
            t1.u_id=t2.u_id
            and t2.id=t3.b_id
            and t1.u_id=#{id}
        </where>
    </select>
</mapper>